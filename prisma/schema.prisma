// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  positions     Position[]
  balances      Balance[]
  trades        Trade[]
  transactions  WalletTransaction[]
  whitelistAddresses AddressWhitelist[]
  withdrawalLimits WithdrawalLimit[]
}

model Balance {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  available String   @default("0")
  locked    String   @default("0")
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, currency])
}

model Order {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  symbol        String
  side          String
  type          String
  price         String
  quantity      String
  leverage      Int
  margin        String
  timeInForce   String
  status        String
  filledQty     String   @default("0")
  remainingQty  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  position      Position? @relation(fields: [positionId], references: [id])
  positionId    String?
}

model Position {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  symbol          String
  side            String
  quantity        String
  entryPrice      String
  leverage        Int
  liquidationPrice String
  margin          String
  unrealizedPnl   String
  realizedPnl     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]

  @@unique([userId, symbol, side], name: "userId_symbol_side")
}

model Trade {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  symbol        String
  side          String
  amount        String
  price         String
  profitPercent Float?
  pnl           String?
  fee           String?
  makerOrderId  String?
  takerOrderId  String?
  makerUserId   String?
  takerUserId   String?
  orderId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([orderId])
  @@index([makerOrderId])
  @@index([takerOrderId])
  @@index([makerUserId])
  @@index([takerUserId])
}

model WalletTransaction {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  type          String   // DEPOSIT, WITHDRAW
  status        String   // PENDING, PROCESSING, COMPLETED, FAILED
  currency      String
  amount        String
  fee           String?
  txHash        String?
  address       String?
  chain         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AddressWhitelist {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currency      String
  address       String
  chain         String
  label         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, currency, address, chain])
}

model WithdrawalLimit {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currency      String
  dailyLimit    String
  dailyUsed     String   @default("0")
  lastResetDate DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, currency])
}

model CurrencyConfig {
  id            String   @id @default(uuid())
  symbol        String   @unique
  name          String
  decimals      Int
  minDeposit    String
  minWithdraw   String
  withdrawFee   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ChainConfig {
  id            String   @id @default(uuid())
  chain         String   @unique
  name          String
  rpcUrl        String
  explorerUrl   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ChainScanStatus {
  id            String   @id @default(uuid())
  chain         String   @unique
  lastBlock     BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TradingPair {
  id        String   @id @default(uuid())
  symbol    String   @unique
  baseAsset String
  quoteAsset String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
