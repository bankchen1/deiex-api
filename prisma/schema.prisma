// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email            String    @unique
  name             String?
  password         String
  twoFactorSecret  String?
  username         String    @unique
  role             String    @default("user")
  isActive         Boolean   @default(true)
  status           String    @default("ACTIVE") // ACTIVE, DISABLED, SUSPENDED
  emailVerified    Boolean   @default(false)
  twoFactorEnabled Boolean   @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // 关联
  strategies       Strategy[]
  positions       Position[]
  balances        Balance[]
  orders          Order[]
  trades          Trade[]
  notifications   Notification[]
  apiKeys         ApiKey[]
  wallet          Wallet?
  transactions    Transaction[]
  followings      CopyTrading[] @relation("Follower")
  followers       CopyTrading[] @relation("Trader")
  traderStats     TraderStats?
}

model Strategy {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  symbol      String
  interval    String
  parameters  Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  positions   Position[]
  backtests   Backtest[]
}

model Position {
  id          String    @id @default(uuid())
  side        String
  type        String
  size        Decimal
  leverage    Decimal   @default(1)
  entryPrice  Decimal
  exitPrice   Decimal?
  stopLoss    Decimal?
  takeProfit  Decimal?
  status      String
  pnl         Decimal?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?

  // 关联
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  strategyId  String
  strategy    Strategy @relation(fields: [strategyId], references: [id])
  orders      Order[]
}

model Balance {
  id          String   @id @default(uuid())
  userId      String
  currency    String
  amount      Decimal  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model Symbol {
  id            String   @id @default(uuid())
  name          String   @unique
  baseAsset     String
  quoteAsset    String
  minPrice      Decimal
  maxPrice      Decimal
  tickSize      Decimal
  minQty        Decimal
  maxQty        Decimal
  stepSize      Decimal
  isActive      Boolean  @default(true)
  tradingFee    Decimal  @default(0)
  fundingRate   Decimal? 
  nextFundingTime DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  orders        Order[]
  trades        Trade[]
  klines        Kline[]
}

model Kline {
  id          String    @id @default(uuid())
  symbol      String
  interval    String
  openTime    DateTime
  open        Decimal
  high        Decimal
  low         Decimal
  close       Decimal
  volume      Decimal
  timestamp   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 关联
  symbolRef Symbol  @relation(fields: [symbol], references: [name])

  @@index([symbol, interval, timestamp])
}

model Order {
  id            String    @id @default(uuid())
  type          String    // LIMIT, MARKET
  side          String    // BUY, SELL
  status        String    // NEW, FILLED, CANCELED, REJECTED
  price         Decimal?
  quantity      Decimal
  filledQty     Decimal   @default(0)
  remainingQty  Decimal?
  triggerPrice  Decimal?  // For stop orders
  timeInForce   String?   // GTC, IOC, FOK
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  filledAt      DateTime?

  // 关联
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  symbolId      String
  symbol        Symbol    @relation(fields: [symbolId], references: [id])
  positionId    String?
  position      Position? @relation(fields: [positionId], references: [id])
  trades        Trade[]
}

model Trade {
  id            String   @id @default(uuid())
  price         Decimal
  quantity      Decimal
  commission    Decimal
  commissionAsset String
  createdAt     DateTime @default(now())

  // 关联
  userId        String
  user          User    @relation(fields: [userId], references: [id])
  symbolId      String
  symbol        Symbol  @relation(fields: [symbolId], references: [id])
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?

  // 关联
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String   @id @default(uuid())
  key         String   @unique
  secret      String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime?

  // 关联
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Wallet {
  id          String    @id @default(uuid())
  userId      String    @unique
  address     String
  chain       String   // ETH, BSC, etc.
  isDefault   Boolean  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 关联
  user        User     @relation(fields: [userId], references: [id])
  transactions Transaction[]
  balances    WalletBalance[]
  walletTransactions WalletTransaction[]
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  walletId    String
  type        String   // DEPOSIT, WITHDRAWAL, TRADE
  status      String   // PENDING, COMPLETED, FAILED
  amount      Decimal
  currency    String
  fee         Decimal?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  wallet      Wallet   @relation(fields: [walletId], references: [id])
}

model Backtest {
  id          String   @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  initialBalance Decimal
  finalBalance  Decimal
  totalTrades   Int
  winRate       Decimal
  sharpeRatio   Decimal
  maxDrawdown   Decimal
  parameters    Json
  results       Json
  createdAt    DateTime @default(now())

  // 关联
  strategyId   String
  strategy     Strategy @relation(fields: [strategyId], references: [id])
}

model CopyTrading {
  id            String    @id @default(uuid())
  followerId    String
  traderId      String
  status        String    // ACTIVE, PAUSED, STOPPED
  leverage      Decimal
  maxAmount     Decimal
  copyPercentage Decimal  @default(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  follower      User     @relation("Follower", fields: [followerId], references: [id])
  trader        User     @relation("Trader", fields: [traderId], references: [id])
  history       CopyTradingHistory[]

  @@unique([followerId, traderId])
}

model CopyTradingHistory {
  id            String   @id @default(uuid())
  type          String   // COPY_OPEN, COPY_CLOSE
  status        String   // SUCCESS, FAILED
  sourceOrderId String
  targetOrderId String?
  errorMessage  String?
  symbol        String
  amount        Decimal
  profit        Decimal  @default(0)
  copyTime      DateTime @default(now())
  createdAt     DateTime @default(now())

  // 关联
  copyTradingId String
  copyTrading   CopyTrading @relation(fields: [copyTradingId], references: [id])
}

model TraderStats {
  id            String   @id @default(uuid())
  traderId      String   @unique
  totalTrades   Int      @default(0)
  winRate       Decimal  @default(0)
  pnl           Decimal  @default(0)
  followers     Int      @default(0)
  totalProfit   Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  trader        User     @relation(fields: [traderId], references: [id])
}

model WalletTransaction {
  id          String    @id @default(uuid())
  userId      String
  walletId    String
  type        String    // DEPOSIT, WITHDRAWAL
  status      String    // PENDING, COMPLETED, FAILED
  amount      Decimal
  currency    String
  txHash      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  wallet      Wallet    @relation(fields: [walletId], references: [id])
}

model WalletBalance {
  id          String    @id @default(uuid())
  walletId    String
  currency    String
  available   Decimal   @default(0)
  locked      Decimal   @default(0)
  totalDeposit Decimal  @default(0)
  totalWithdraw Decimal @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  wallet      Wallet    @relation(fields: [walletId], references: [id])
}

model TradingPair {
  id          String    @id @default(uuid())
  symbol      String    @unique
  baseAsset   String
  quoteAsset  String
  status      String    // TRADING, BREAK, HALT
  minPrice    Decimal
  maxPrice    Decimal
  tickSize    Decimal
  minQty      Decimal
  maxQty      Decimal
  stepSize    Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticker {
  id                  String   @id @default(uuid())
  symbol              String   @unique
  price               Decimal
  priceChange         Decimal
  priceChangePercent  Decimal
  volume              Decimal
  quoteVolume         Decimal
  high                Decimal
  low                 Decimal
  openPrice           Decimal
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([symbol])
}
