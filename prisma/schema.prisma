// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  balances      Balance[]
  transactions  WalletTransaction[]
  whitelistAddresses AddressWhitelist[]
  withdrawalLimits WithdrawalLimit[]
  wallets       Wallet[]
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  currency  String
  address   String
  available String   @default("0")
  locked    String   @default("0")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, currency])
}

model Balance {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  available String   @default("0")
  locked    String   @default("0")
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, currency])
}

model WalletTransaction {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  type          String   // DEPOSIT, WITHDRAW
  status        String   // PENDING, PROCESSING, COMPLETED, FAILED
  currency      String
  amount        String
  fee           String?
  txHash        String?
  address       String?
  chain         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([txHash])
}

model AddressWhitelist {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currency      String
  address       String
  chain         String
  label         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, currency, address, chain])
}

model WithdrawalLimit {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  currency        String
  dailyLimit      String
  dailyUsed       String   @default("0")
  monthlyLimit    String
  monthlyUsed     String   @default("0")
  lastResetDaily  DateTime @default(now())
  lastResetMonthly DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, currency])
}

model CurrencyConfig {
  id            String   @id @default(uuid())
  symbol        String   @unique
  name          String
  decimals      Int
  minDeposit    String
  minWithdraw   String
  withdrawFee   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ChainConfig {
  id            String   @id @default(uuid())
  chain         String   @unique
  name          String
  rpcUrl        String
  explorerUrl   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WalletAuditLog {
  id            String   @id @default(uuid())
  userId        String
  walletId      String
  action        String
  changes       Json
  reason        String?
  operator      String
  ipAddress     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([walletId])
}
